package com.jmr.mediapowerhouse

import android.content.ComponentName
import android.content.Intent
import android.content.ServiceConnection
import android.net.Uri
import android.os.Bundle
import android.os.IBinder
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Audiotrack
import androidx.compose.material.icons.filled.Download
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material.icons.filled.MusicNote
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material.icons.filled.Settings
import androidx.compose.material.icons.filled.Share2
import androidx.compose.material.icons.filled.Spa
import androidx.compose.material.icons.filled.Videocam
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalDrawerSheet
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.NavigationDrawerItem
import androidx.compose.material3.NavigationDrawerItemDefaults
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.unit.dp
import androidx.core.view.WindowCompat
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.media3.session.MediaController
import androidx.media3.session.SessionToken
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import com.google.common.util.concurrent.ListenableFuture
import com.google.common.util.concurrent.MoreExecutors
import com.jmr.mediapowerhouse.ui.screens.DownloadsScreen
import com.jmr.mediapowerhouse.ui.screens.HomeScreen
import com.jmr.mediapowerhouse.ui.screens.MediaListScreen
import com.jmr.mediapowerhouse.ui.screens.MusicScreen
import com.jmr.mediapowerhouse.ui.screens.PlayerScreen
import com.jmr.mediapowerhouse.ui.screens.SettingsScreen
import com.jmr.mediapowerhouse.ui.screens.SocialMediaScreen
import com.jmr.mediapowerhouse.ui.screens.SpotifyScreen
import com.jmr.mediapowerhouse.ui.screens.TorrentScreen
import com.jmr.mediapowerhouse.ui.theme.MediaPowerhouseTheme
import com.jmr.mediapowerhouse.viewmodel.DownloadViewModel
import com.spotify.android.appremote.SpotifyAppRemote
import com.spotify.android.appremote.connector.ConnectionParams
import com.spotify.android.appremote.connector.Connector

class MainActivity : ComponentActivity() {

    // Media3 Playback Service related variables
    private lateinit var mediaControllerFuture: ListenableFuture<MediaController>
    private val mediaControllerConnection = object : ServiceConnection {
        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
            mediaControllerFuture = MediaController.Builder(
                this@MainActivity,
                SessionToken(
                    this@MainActivity,
                    ComponentName(this@MainActivity, `PlaybackService.kt`::class.java)
                )
            ).buildAsync()
            Log.d("MainActivity", "MediaController connected")
        }

        override fun onServiceDisconnected(name: ComponentName?) {
            Log.d("MainActivity", "MediaController disconnected")
        }
    }

    // Spotify App Remote related variables
    // These values are read from BuildConfig, which is generated by Gradle.
    // Ensure your app/build.gradle.kts defines buildConfigField for SPOTIFY_CLIENT_ID and SPOTIFY_REDIRECT_URI
    private val spotifyClientId: String = BuildConfig.SPOTIFY_CLIENT_ID
    private val spotifyRedirectUri: String = BuildConfig.SPOTIFY_REDIRECT_URI
    private var spotifyAppRemote: SpotifyAppRemote? = null

    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        WindowCompat.setDecorFitsSystemWindows(window, false) // Enable edge-to-edge display
        enableEdgeToEdge()

        // Bind to the PlaybackService to get the MediaController
        val sessionToken = SessionToken(this, ComponentName(this, `PlaybackService.kt`::class.java))
        mediaControllerFuture = MediaController.Builder(this, sessionToken).buildAsync()

        setContent {
            // Instantiate ViewModels
            val `mediaViewModel.kt`: `MediaViewModel.kt` = viewModel()
            val `playerViewModel.kt`: `PlayerViewModel.kt` = viewModel()
            val downloadViewModel: DownloadViewModel = viewModel()
            val `themeViewModel.kt`: `ThemeViewModel.kt` = viewModel()
            val `torrentViewModel.kt`: `TorrentViewModel.kt` =
                viewModel() // Instantiate TorrentViewModel

            MediaPowerhouseTheme(
                darkTheme = `themeViewModel.kt`.isDarkMode.value
            ) {
                val navController = rememberNavController()
                val scope = rememberCoroutineScope()
                var drawerState by remember { mutableStateOf(androidx.compose.material3.DrawerValue.Closed) }

                // Connect MediaController to PlayerViewModel
                DisposableEffect(mediaControllerFuture) {
                    val listener = { controller: MediaController ->
                        `playerViewModel.kt`.setMediaController(controller)
                    }
                    mediaControllerFuture.addListener(listener, MoreExecutors.directExecutor())

                    onDispose {
                        mediaControllerFuture.removeListener(
                            listener,
                            MoreExecutors.directExecutor()
                        )
                        MediaController.releaseFuture(mediaControllerFuture)
                    }
                }

                // Function to play media items
                val onPlayMedia: (List<Uri>, Int) -> Unit = { mediaItems, index ->
                    `playerViewModel.kt`.playMedia(mediaItems, index)
                    navController.navigate(Screen.Player.route)
                }

                ModalNavigationDrawer(
                    drawerState = drawerState,
                    drawerContent = {
                        ModalDrawerSheet {
                            Spacer(Modifier.height(16.dp))
                            // Sidebar navigation items
                            val drawerItems = listOf(
                                Screen.Home,
                                Screen.YouTube,
                                Screen.SocialMedia,
                                Screen.Torrents,
                                Screen.Music,
                                Screen.Spotify, // New: Spotify screen in sidebar
                                Screen.Downloads,
                                Screen.Settings,
                                Screen.MusicList,
                                Screen.VideosList
                            )
                            drawerItems.forEach { screen ->
                                NavigationDrawerItem(
                                    icon = { Icon(screen.icon, contentDescription = screen.route) },
                                    label = { Text(screen.route.replaceFirstChar { it.uppercase() }) },
                                    selected = navController.currentBackStackEntryAsState().value?.destination?.route == screen.route,
                                    onClick = {
                                        scope.launch {
                                            drawerState =
                                                androidx.compose.material3.DrawerValue.Closed
                                        }
                                        navController.navigate(screen.route) {
                                            popUpTo(navController.graph.startDestinationId) {
                                                saveState = true
                                            }
                                            launchSingleTop = true
                                            restoreState = true
                                        }
                                    },
                                    modifier = Modifier.padding(NavigationDrawerItemDefaults.itemPadding)
                                )
                            }
                        }
                    }
                ) {
                    Scaffold(
                        topBar = {
                            TopAppBar(
                                title = { Text("Media Powerhouse") },
                                navigationIcon = {
                                    IconButton(onClick = {
                                        scope.launch {
                                            drawerState =
                                                androidx.compose.material3.DrawerValue.Open
                                        }
                                    }) {
                                        Icon(Icons.Default.Menu, contentDescription = "Menu")
                                    }
                                },
                                colors = TopAppBarDefaults.topAppBarColors(
                                    containerColor = MaterialTheme.colorScheme.primary,
                                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                                )
                            )
                        },
                        bottomBar = {
                            NavigationBar {
                                val navBackStackEntry by navController.currentBackStackEntryAsState()
                                val currentRoute = navBackStackEntry?.destination?.route

                                // Define navigation items for the bottom bar
                                val items = listOf(
                                    Screen.Home,
                                    Screen.YouTube,
                                    Screen.Torrents,
                                    Screen.Downloads,
                                    Screen.Settings
                                )

                                items.forEach { screen ->
                                    NavigationBarItem(
                                        icon = {
                                            Icon(
                                                screen.icon,
                                                contentDescription = screen.route
                                            )
                                        },
                                        label = { Text(screen.route.replaceFirstChar { it.uppercase() }) },
                                        selected = currentRoute == screen.route,
                                        onClick = {
                                            navController.navigate(screen.route) {
                                                popUpTo(navController.graph.startDestinationId) {
                                                    saveState = true
                                                }
                                                launchSingleTop = true
                                                restoreState = true
                                            }
                                        }
                                    )
                                }
                            }
                        }
                    ) { paddingValues ->
                        NavHost(
                            navController = navController,
                            startDestination = Screen.Home.route,
                            modifier = Modifier.padding(paddingValues)
                        ) {
                            composable(Screen.Home.route) {
                                HomeScreen(downloadViewModel = downloadViewModel)
                            }
                            composable(Screen.YouTube.route) {
                                YouTubeScreen(downloadViewModel = downloadViewModel)
                            }
                            composable(Screen.SocialMedia.route) {
                                SocialMediaScreen(downloadViewModel = downloadViewModel)
                            }
                            composable(Screen.Torrents.route) {
                                TorrentScreen(`torrentViewModel.kt` = `torrentViewModel.kt`) // Pass torrentViewModel
                            }
                            composable(Screen.Music.route) {
                                MusicScreen(downloadViewModel = downloadViewModel)
                            }
                            composable(Screen.Spotify.route) { // New: Spotify Screen
                                // Pass spotifyAppRemote to SpotifyScreen for interaction
                                SpotifyScreen(spotifyAppRemote = spotifyAppRemote)
                            }
                            composable(Screen.Downloads.route) {
                                DownloadsScreen(downloadViewModel = downloadViewModel)
                            }
                            composable(Screen.Settings.route) {
                                SettingsScreen(
                                    themeViewModel = `themeViewModel.kt`,
                                    downloadViewModel = downloadViewModel
                                )
                            }
                            composable(Screen.MusicList.route) {
                                val audioList by `mediaViewModel.kt`.filteredAudioList
                                MediaListScreen(
                                    mediaItems = audioList,
                                    isLoading = `mediaViewModel.kt`.isLoading.value,
                                    searchQuery = `mediaViewModel.kt`.searchQuery.value,
                                    onSearchQueryChange = {
                                        `mediaViewModel.kt`.searchQuery.value = it
                                    },
                                    onItemClick = { index -> onPlayMedia(audioList, index) }
                                )
                            }
                            composable(Screen.VideosList.route) {
                                val videoList by `mediaViewModel.kt`.filteredVideoList
                                MediaListScreen(
                                    mediaItems = videoList,
                                    isLoading = `mediaViewModel.kt`.isLoading.value,
                                    searchQuery = `mediaViewModel.kt`.searchQuery.value,
                                    onSearchQueryChange = {
                                        `mediaViewModel.kt`.searchQuery.value = it
                                    },
                                    onItemClick = { index -> onPlayMedia(videoList, index) }
                                )
                            }
                            composable(Screen.Player.route) {
                                PlayerScreen(mediaControllerFuture)
                            }
                        }
                    }
                }
            }
        }
    }

    override fun onStart() {
        super.onStart()
        // Bind to PlaybackService when activity starts
        val intent = Intent(this, `PlaybackService.kt`::class.java)
        bindService(intent, mediaControllerConnection, BIND_AUTO_CREATE)

        // Spotify SDK Connection
        val connectionParams = ConnectionParams.Builder(spotifyClientId)
            .setRedirectUri(spotifyRedirectUri)
            .showAuthView(true) // Set to false if you want to handle auth flow manually
            .build()

        SpotifyAppRemote.connect(this, connectionParams, object : Connector.ConnectionListener {
            override fun onConnected(appRemote: SpotifyAppRemote) {
                spotifyAppRemote = appRemote
                Log.d("MainActivity", "Spotify Connected! Yay!")
                // You can now interact with Spotify App Remote, e.g., play a playlist
                // val playlistURI = "spotify:playlist:37i9dQZF1DX2sUQwD7tbmL"
                // it.playerApi.play(playlistURI)
                // it.playerApi.subscribeToPlayerState().setEventCallback { playerState ->
                //     val track: Track = playerState.track
                //     Log.d("MainActivity", "Now playing: ${track.name} by ${track.artist.name}")
                // }
            }

            override fun onFailure(throwable: Throwable) {
                Log.e("MainActivity", "Spotify Connection Failed: ${throwable.message}", throwable)
                spotifyAppRemote = null // Ensure remote is null on failure
                // Handle errors here, e.g., show a Toast to the user
            }
        })
    }

    override fun onStop() {
        super.onStop()
        // Release MediaController when activity stops
        MediaController.releaseFuture(mediaControllerFuture)
        unbindService(mediaControllerConnection)

        // Disconnect Spotify App Remote
        spotifyAppRemote?.let {
            SpotifyAppRemote.disconnect(it)
            spotifyAppRemote = null
            Log.d("MainActivity", "Spotify Disconnected.")
        }
    }
}

// Define sealed class for navigation destinations and their icons
sealed class Screen(val route: String, val icon: ImageVector) {
    object Home : Screen("home", Icons.Default.Home)
    object YouTube : Screen("youtube", Icons.Default.Videocam)
    object SocialMedia : Screen("socialMedia", Icons.Default.Share2)
    object Torrents : Screen("torrents", Icons.Default.Download)
    object Music : Screen("music", Icons.Default.MusicNote)
    object Spotify :
        Screen("spotify", Icons.Default.Spa) // New Spotify Screen with a placeholder icon

    object Downloads : Screen("downloads", Icons.Default.Download)
    object Settings : Screen("settings", Icons.Default.Settings)
    object Player : Screen("player", Icons.Default.PlayArrow) // Player screen (not in bottom bar)

    // New navigation items for the sidebar
    object MusicList : Screen("music_list", Icons.Default.Audiotrack)
    object VideosList : Screen("videos_list", Icons.Default.Videocam)
}
